// =======================================================
// This file is auto generated by [DataConvertor for Excel Lite] convertor,
// do not edit by youself!
// >>>> by HuMinghua <<<<  Sep 27, 2018 at 1:57:31 pm
// ======================================================


import Foundation


private let AUTO_PLIST_QBPERF_PATH = Bundle.main.path(forResource: "QBPerf", ofType: "plist")

private let AUTO_PLIST_QBPERF_KEY_RANK = "rank"   // Rank
private let AUTO_PLIST_QBPERF_KEY_PLAYERNAME = "playerName"   // PlayerName
private let AUTO_PLIST_QBPERF_KEY_TEAMCODE = "teamCode"   // TeamCode
private let AUTO_PLIST_QBPERF_KEY_TEAMNAME = "teamName"   // TeamName
private let AUTO_PLIST_QBPERF_KEY_GAMESPLAYED = "gamesPlayed"   // GamesPlayed
private let AUTO_PLIST_QBPERF_KEY_COMPLETIONS = "completions"   // Completions
private let AUTO_PLIST_QBPERF_KEY_ATTEMPTS = "attempts"   // Attempts
private let AUTO_PLIST_QBPERF_KEY_COMPLETIONPERCENTAGE = "completionPercentage"   // CompletionPercentage
private let AUTO_PLIST_QBPERF_KEY_ATTEMPTSPERGAME = "attemptsPerGame"   // AttemptsPerGame
private let AUTO_PLIST_QBPERF_KEY_YARDS = "yards"   // Yards
private let AUTO_PLIST_QBPERF_KEY_AVERAGEPERCOMPLETION = "averagePerCompletion"   // AveragePerCompletion
private let AUTO_PLIST_QBPERF_KEY_YARDSPERGAME = "yardsPerGame"   // YardsPerGame
private let AUTO_PLIST_QBPERF_KEY_TOUCHDOWNPASSES = "touchdownPasses"   // TouchdownPasses
private let AUTO_PLIST_QBPERF_KEY_INTERCEPTIONS = "interceptions"   // Interceptions
private let AUTO_PLIST_QBPERF_KEY_FIRSTDOWNS = "firstDowns"   // FirstDowns
private let AUTO_PLIST_QBPERF_KEY_FIRSTDOWNPERCENTAGE = "firstDownPercentage"   // FirstDownPercentage
private let AUTO_PLIST_QBPERF_KEY_LONGEST = "longest"   // Longest
private let AUTO_PLIST_QBPERF_KEY_SACKS = "sacks"   // Sacks
private let AUTO_PLIST_QBPERF_KEY_RATING = "rating"   // Rating


class QBPerfManager {

    public static let sharedManager = QBPerfManager()
    private init(){}

    private var _qBPerfs = [QBPerf]()

    func allQBPerfs() -> [QBPerf]{

        if _qBPerfs.count > 0 {
            return _qBPerfs
        }

        if let allDatas = NSArray(contentsOfFile: AUTO_PLIST_QBPERF_PATH!) {

            for dict in allDatas {
                //guard let dict = dict as? [String: AnyObject] else {continue}
                guard let dict = dict as? [String: AnyObject] else {continue}

                let qBPerf = QBPerf()
                qBPerf.rank = dict[AUTO_PLIST_QBPERF_KEY_RANK] as? Int // Rank
                qBPerf.playerName = dict[AUTO_PLIST_QBPERF_KEY_PLAYERNAME] as? String // PlayerName
                qBPerf.teamCode = dict[AUTO_PLIST_QBPERF_KEY_TEAMCODE] as? String // TeamCode
                qBPerf.teamName = dict[AUTO_PLIST_QBPERF_KEY_TEAMNAME] as? String // TeamName
                qBPerf.gamesPlayed = dict[AUTO_PLIST_QBPERF_KEY_GAMESPLAYED] as? Int // GamesPlayed
                qBPerf.completions = dict[AUTO_PLIST_QBPERF_KEY_COMPLETIONS] as? Int // Completions
                qBPerf.attempts = dict[AUTO_PLIST_QBPERF_KEY_ATTEMPTS] as? Int // Attempts
                qBPerf.completionPercentage = dict[AUTO_PLIST_QBPERF_KEY_COMPLETIONPERCENTAGE] as? Double // CompletionPercentage
                qBPerf.attemptsPerGame = dict[AUTO_PLIST_QBPERF_KEY_ATTEMPTSPERGAME] as? Double // AttemptsPerGame
                qBPerf.yards = dict[AUTO_PLIST_QBPERF_KEY_YARDS] as? Int // Yards
                qBPerf.averagePerCompletion = dict[AUTO_PLIST_QBPERF_KEY_AVERAGEPERCOMPLETION] as? Double // AveragePerCompletion
                qBPerf.yardsPerGame = dict[AUTO_PLIST_QBPERF_KEY_YARDSPERGAME] as? Double // YardsPerGame
                qBPerf.touchdownPasses = dict[AUTO_PLIST_QBPERF_KEY_TOUCHDOWNPASSES] as? Int // TouchdownPasses
                qBPerf.interceptions = dict[AUTO_PLIST_QBPERF_KEY_INTERCEPTIONS] as? Int // Interceptions
                qBPerf.firstDowns = dict[AUTO_PLIST_QBPERF_KEY_FIRSTDOWNS] as? Int // FirstDowns
                qBPerf.firstDownPercentage = dict[AUTO_PLIST_QBPERF_KEY_FIRSTDOWNPERCENTAGE] as? Double // FirstDownPercentage
                qBPerf.longest = dict[AUTO_PLIST_QBPERF_KEY_LONGEST] as? String // Longest
                qBPerf.sacks = dict[AUTO_PLIST_QBPERF_KEY_SACKS] as? Int // Sacks
                qBPerf.rating = dict[AUTO_PLIST_QBPERF_KEY_RATING] as? Double // Rating
                _qBPerfs.append(qBPerf)
            }
        }
        return _qBPerfs
    }
}
